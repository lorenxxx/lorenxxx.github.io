<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Loren`Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lorenxxx.github.io/"/>
  <updated>2018-06-20T13:05:28.094Z</updated>
  <id>https://lorenxxx.github.io/</id>
  
  <author>
    <name>Loren</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>全局统一异常处理的使用方式和源码解析</title>
    <link href="https://lorenxxx.github.io/2018/06/20/updating/"/>
    <id>https://lorenxxx.github.io/2018/06/20/updating/</id>
    <published>2018-06-20T09:41:20.000Z</published>
    <updated>2018-06-20T13:05:28.094Z</updated>
    
    <content type="html"><![CDATA[<p>更新中。。。<br><a id="more"></a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>异常处理是开发过程中一个不可避免的问题，你是否写过这样的代码？你是否还在写这样的代码？你是否已经厌倦写这样的代码？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/api/v1/tasks"</span>)</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskController</span> <span class="keyword">implements</span> <span class="title">ITaskController</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> ITaskService taskService;</span><br><span class="line">  </span><br><span class="line">   <span class="meta">@PostMapping</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Result&lt;String&gt; <span class="title">addTask</span><span class="params">(@RequestBody AddTaskDTO task)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">...</span><br><span class="line">   taskService.addTask(task);</span><br><span class="line">       result = Result.success(<span class="string">"新增成功"</span>);  </span><br><span class="line">  &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">      result = Result.fail(<span class="string">"参数错误"</span>);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (PermissionException e) &#123;</span><br><span class="line">     result = Result.fail(<span class="string">"权限校验失败"</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (BusinessException e) &#123;</span><br><span class="line">    result = Result.fail(<span class="string">"业务异常"</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    result = Result.fail(<span class="string">"未知错误"</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看看这无止境的try…catch…，全局统一异常处理了解一下？</p><p>统一异常处理是一种非常方便的异常处理方式，能够简化控制层和服务层的代码。让我们来对比一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/api/v1/tasks"</span>)</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskController</span> <span class="keyword">implements</span> <span class="title">ITaskController</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> ITaskService taskService;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@PostMapping</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Result&lt;String&gt; <span class="title">addTask</span><span class="params">(@RequestBody AddTaskDTO task)</span> </span>&#123;</span><br><span class="line">   taskService.addTask(task);</span><br><span class="line">     <span class="keyword">return</span> Result.sucess(<span class="string">"新增成功"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在比较流行的两种全局异常处理的方式：</p><p>##</p><ul><li>HandlerExceptionResolver接口</li><li>@ControllerAdvice注解</li></ul><p>本文将介绍这两种使用方式，并从源码上分析@ControllerAdvice注解实现原理。</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>首先，我们先自定义一个异常，用来代表应用可能会产生的业务异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BusinessException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> <span class="keyword">implements</span> <span class="title">IException2Result</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">5917336312549960151L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BusinessException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BusinessException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BusinessException</span><span class="params">(String message, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result&lt;String&gt; <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log();</span><br><span class="line">        <span class="keyword">return</span> resolve();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.error(<span class="keyword">this</span>.getMessage(), <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result&lt;String&gt; <span class="title">resolve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="keyword">this</span>.getMessage() == <span class="keyword">null</span> ? ToastConstants.SERVICE_INTERNAL_ERROR : <span class="keyword">this</span>.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时可以在此异常的基础上通过继承进行扩展，以满足自己的需要。</p><h4 id="HandlerExceptionResolver接口的使用方式"><a href="#HandlerExceptionResolver接口的使用方式" class="headerlink" title="HandlerExceptionResolver接口的使用方式"></a>HandlerExceptionResolver接口的使用方式</h4><p>我们先来看一下HandlerExceptionResolver接口的源码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">ModelAndView <span class="title">resolveException</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该接口只定义了一个resolveException方法，我们需要做的就是自定义一个统一异常处理类并实现该接口，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Order</span>(-<span class="number">1000</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionResolver</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">            HttpServletResponse response, Object handler, Exception ex)</span> </span>&#123;</span><br><span class="line">        Result&lt;String&gt; result = <span class="keyword">new</span> Result();</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">if</span>(ex <span class="keyword">instanceof</span> BussinessException) &#123;</span><br><span class="line">            resolverBussinessException(ex, sb, result);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resolverOtherException(ex, sb, result); </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        result.setSuccess(Boolean.False);</span><br><span class="line">        result.setData(ex.getMessage());</span><br><span class="line">        </span><br><span class="line">        response.setContentType(MediaType.APPLICATION_JSON_VALUE);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">        response.setHeader(<span class="string">"Cache-Control"</span>, <span class="string">"no-cache, must-revalidate"</span>);  </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            response.getWriter().write(JSON.toJSONString(result));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            logger.error(<span class="string">"与客户端通讯异常："</span> + e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        logger.debug(<span class="string">"异常："</span> + ex.getMessage(), ex);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView();</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>resovleException方法负责解析并处理异常，可以在这里面实现自定义的异常处理逻辑，值得一提的是，该方法返回ModelAndView，所以对于前后端分离的开发场景，需要手动打开流并写回JSON格式。另外需要注意的是，需要在这个类上加上@Order注解，因为Spring默认有三个异常拦截器，里面的order属性分别为0，1，2，当异常被捕获时，会首先去这三个拦截器中找匹配的异常，若有匹配的，则不会执行我们自定义的异常处理器。@Order(-1000)的作用就是将顺序提到第一位，先加载我们的，有符合异常条件的，则不会继续走其他三个默认的。若请求没报异常，则此类的resovleException方法是不会运行的。</p><h4 id="ControllerAdvice注解的使用方式"><a href="#ControllerAdvice注解的使用方式" class="headerlink" title="@ControllerAdvice注解的使用方式"></a>@ControllerAdvice注解的使用方式</h4><p>这种方式相对于上一种来说更加简单，代码更加清晰易懂，定义一个全局统一异常处理类，如下图所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="meta">@Order</span>(-<span class="number">1000</span>)</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnitedExceptionHandleAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(BusinessException.class)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result&lt;String&gt; <span class="title">handleBusinessException</span><span class="params">(BusinessException e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> e.process();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(Exception.class)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result&lt;String&gt; <span class="title">handleOtherException</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> processDefault(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Result&lt;String&gt; <span class="title">processDefault</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">        log.error(e.getMessage(), e);</span><br><span class="line">        <span class="keyword">return</span> Result.fail(ToastConstants.SERVICE_INTERNAL_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个类上加上@ControllerAdvice注解，同时加上@Order(-1000)，原理同上。在类中定义异常处理方法，并配合@ExceptionHandler注解，指明这个方法可以处理哪一种类型的异常。同时配合@ResponseBody注解，可以轻松的返回JSON格式的数据。</p><p>推荐使用@ControllerAdvice注解的方式实现全局统一异常处理。</p><h4 id="ControllerAdvice实现源码解析"><a href="#ControllerAdvice实现源码解析" class="headerlink" title="@ControllerAdvice实现源码解析"></a>@ControllerAdvice实现源码解析</h4><p>首先来看看这个注解的源码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ControllerAdvice &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@AliasFor</span>(<span class="string">"basePackages"</span>)</span><br><span class="line">String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">@AliasFor</span>(<span class="string">"value"</span>)</span><br><span class="line">String[] basePackages() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">Class&lt;?&gt;[] basePackageClasses() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">Class&lt;?&gt;[] assignableTypes() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">Class&lt;? extends Annotation&gt;[] annotations() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>非常简单，表面上看不出任何的功能的实现，但是注意它的Retention是Runtime。</p><p>接下来，我们先模拟一个请求，这个请求会在处理的过程中会抛出一个异常，这个异常会被统一异常切面捕捉到，然后进行相应的处理，让我们一步步Debug，看清楚整个请求的处理过程。</p><p>。。。<br>。。。<br>。。。</p><p>好了，通过上面的Debug，我们找到了统一异常切面的核心点所在：ExceptionHandlerExceptionResolver类的exceptionHandlerAdviceCache属性。<br>接下来先看看ExceptionHandlerExceptionResolver的部分相关源码，以此来弄清楚exceptionHandlerAdviceCache是如何初始化的。<br>可以看到，ExceptionHandlerExceptionResolver实现了InitializingBean接口，这个接口只定义一个afterPropertiesSet方法，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个接口的作用就是在Spring容器初始化bean的时候完成一些初始化操作。ExceptionHandlerExceptionResolver实现了该方法，并在该方法中完成了对exceptionHandlerAdviceCache的初始化，我们来看一下其关键的部分：通过ControllerAdviceBean.findAnnotatedBeans方法从上下文中找出所有注解了@ControllerAdvice的类，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ControllerAdviceBean</span> <span class="keyword">implements</span> <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;ControllerAdviceBean&gt; <span class="title">findAnnotatedBeans</span><span class="params">(ApplicationContext applicationContext)</span> </span>&#123;</span><br><span class="line">List&lt;ControllerAdviceBean&gt; beans = <span class="keyword">new</span> ArrayList&lt;ControllerAdviceBean&gt;();</span><br><span class="line"><span class="keyword">for</span> (String name : BeanFactoryUtils.beanNamesForTypeIncludingAncestors(applicationContext, Object.class)) &#123;</span><br><span class="line"><span class="keyword">if</span> (applicationContext.findAnnotationOnBean(name, ControllerAdvice.class) != <span class="keyword">null</span>) &#123;</span><br><span class="line">beans.add(<span class="keyword">new</span> ControllerAdviceBean(name, applicationContext));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> beans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>找到之后封装成ExceptionHandlerMethodResolver，装载到exceptionHandlerAdviceCache中，从而完成初始化动作。应用启动后，对于请求抛出的异常，将在这里面寻找合适的方法进行处理。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://www.jianshu.com/p/da311ae29908" target="_blank" rel="noopener">https://www.jianshu.com/p/da311ae29908</a></li><li></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;更新中。。。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://lorenxxx.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://lorenxxx.github.io/2018/06/14/hello-world/"/>
    <id>https://lorenxxx.github.io/2018/06/14/hello-world/</id>
    <published>2018-06-14T12:13:12.203Z</published>
    <updated>2018-06-14T12:13:12.203Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
